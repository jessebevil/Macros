Sub Main
	/call Declares
	/call CheckThings
	:StartAgain
	/call OpenBarter
	/echo \ayVerifying buylines.
	/call CheckMyBuyLines
	/call TurnOnBuyer
	/echo \ayDone Creating all buylines. Moving to main loop.
	:mainloop
	/if (${Zone.ID} == 151) {
		/call CheckMyPockets
		/if (${HadToGive}) {
			/varset HadToGive FALSE
			/goto :StartAgain
		}
	}
	/if (${Zone.ID} == 151) /goto :mainloop
	
/return

Sub TurnOnBuyer
	/if (${Debugging}) /echo \awBuyerMode: ${If[${Me.Buyer},On,Off]}, Turning it On. \atLine: ${Macro.CurLine}
	/if (!${Me.Buyer}) {
		/if (${Window[BarterWnd].Open}) {
			/notify BarterWnd BTR_StartStopButton leftmouseup
		}
	}
/return

Sub TurnOffBuyer
	/if (${Debugging}) /echo \awBuyerMode: ${If[${Me.Buyer},On,Off]}, Turning it OFF. \atLine: ${Macro.CurLine}
	/if (${Me.Buyer}) {
		/if (${Window[BarterWnd].Open}) {
			/notify BarterWnd BTR_StartStopButton leftmouseup
		}
	}
/return

Sub NavToLoc(int Y,int X,int Z)
	/if (${Debugging}) /echo \atEntering Sub NavToLoc for ${Y} ${X} ${Z} at Line: ${Macro.CurLine}
	:navtoloc
	/if (${Math.Distance[${Me.Y}, ${Me.X}, ${Me.Z}: ${Y}, ${X}, ${Z}]} > 15) {
		/if (${Navigation.Active}) {
			/delay 10
		} else {
			/nav loc ${Y} ${X} ${Z}
		}
	}
	/if (${Math.Distance[${Me.Y}, ${Me.X}, ${Me.Z}: ${Y}, ${X}, ${Z}]} > 15) /goto :navtoloc
	/if (${Navigation.Active}) /nav stop
/return

Sub NavToID(int TargetID)
	:navtoid
	/if (${Math.Distance[${Me.Y}, ${Me.X}, ${Me.Z}: ${Spawn[id ${TargetID}].Y} ${Spawn[id ${TargetID}].X} ${Spawn[id ${TargetID}].Z}]} > 15 || ${Spawn[id ${TargetID}].Distance3D} > 15) {
		/if (${Navigation.Active}) {
			/delay 10
			/if (${Debugging}) /echo \aoNavigation distance remaining: ${Math.Distance[${Me.Y}, ${Me.X}, ${Me.Z}: ${Spawn[id ${TargetID}].Y} ${Spawn[id ${TargetID}].X} ${Spawn[id ${TargetID}].Z}]}
		} else {
			/nav loc ${Spawn[id ${TargetID}].Y} ${Spawn[id ${TargetID}].X} ${Spawn[id ${TargetID}].Z}
		}
	}
	/if (${Math.Distance[${Me.Y}, ${Me.X}, ${Me.Z}: ${Spawn[id ${TargetID}].Y} ${Spawn[id ${TargetID}].X} ${Spawn[id ${TargetID}].Z}]} > 15 || ${Spawn[id ${TargetID}].Distance3D} > 15) /goto :navtoid
	/if (${Navigation.Active}) /nav stop
/return

Sub CheckMyPockets
	/declare i int local 0
	/declare bFound bool local FALSE
	/for i 2 to ${ItemArray.Size}
		/if (${FindItemCount[${ItemArray[${i}]}]}) {
			/if (${IHaveArray[${i}]} != -1) {
				/echo \ayFound: \ap${ItemArray[${i}]} \awin my pockets. Need to hand it off.
				/if (!${IHaveArray[${i}]}) /varset IHaveArray[${i}] 1
				/if (!${bFound}) /varset bFound TRUE
			}
		} else /if (${IHaveArray[${i}]}) {
			/varset IHaveArray[${i}] 0
		}
	/next i
	/if (${bFound}) {
		/if (${Debugging}) /echo \agSeems I have some items I need to pass off.
		/varset HadToGive TRUE
		/call PassOffItems
	}
/return


Sub PassOffItems
	/call TurnOffBuyer
	/delay 5
	/cleanup
	/declare i int local 0
	/declare j int local 0
	|** Give stuff to someone **|
	/for i 1 to ${Math.Calc[${Math.Calc[${BagMenArray.Size}/${ItemArray.Size}].Int}]}
		/if (${Debugging}) /echo \amBagman: ${BagMenArray[${i},1]} check. \atLine: ${Macro.CurLine}
		/for j 2 to ${ItemArray.Size}
			/if (${Debugging}) /echo \awDo I have \ap${ItemArray[${j}]}\aw: ${If[${Bool[${IHaveArray[${j}]}]},\agYes,\arNo]}
			/if (${IHaveArray[${j}]}) {
				/if (!${BagMenArray[${i},${j}]} && ${BagMenArray[${i},${j}]} != -1) {
					:tryToGive
					/if (${Spawn[${BagMenArray[${i},1]}].Distance3D} < 15) {
						/target ${BagMenArray[${i},1]}
						/delay 2s ${Target.CleanName.Equal[${BagMenArray[${i},1]}]}
						/call GiveItems "${ItemArray[${j}]}" 1
						/if (${ItemGiven}||${HasItem}) {
							/if (${ItemGiven}) /varset ItemGiven FALSE
							/if (${HasItem}) /varset HasItem FALSE
							/varset BagMenArray[${i},${j}] 1
						}
						/if (${ItemGiven}) /varset IHaveArray[${j}] 0
					} else {
						/call NavToID ${Spawn[${BagMenArray[${i},1]}].ID}
						/goto :tryToGive
					}
				}
			}
			/if (${i} == ${Math.Calc[${BagMenArray.Size}/${ItemArray.Size}].Int}) {
				/if (${FindItemCount[=${ItemArray[${j}]}]} && ${BagMenArray[${i},${j}]}) {
				/if (${Debugging}) /echo ${ItemArray[${j}]} is held by all bagmen. Setting to -1 for ignore. \atLine: ${Macro.CurLine}
					/echo \ap${ItemArray[${j}]} is held by all bagmen, going to hold on to it.
					/varset IHaveArray[${j}] -1
				}
			}
		/next j
	/next i
	/call NavToLoc "${startLoc}"
/return

Sub GiveItems(string itemToGive, int Amount)
	|** If I don't have the item I can't give it to anyone. **|
	/if (!${FindItemCount[=${itemToGive}]}) /return
	/if (!${Bool[${Amount}]}) /varset Amount 1
	/if (${Debugging}) /echo "\aoGiving \ay${Amount} \aox \ap${itemToGive} \aoto \ag${Target.CleanName}"
	/declare i int local
	/keypress OPEN_INV_BAGS
	/if (!${Window[InventoryWindow].Open}) /windowstate InventoryWindow open
	/delay 10s ${Window[InventoryWindow].Open}
	/delay 5
	
	/for i 1 to ${Amount}
		/nomodkey /ctrlkey /itemnotify ${FindItem[=${itemToGive}].InvSlot} leftmouseup
		/delay 2
		/invoke ${Target.LeftClick}
		/delay 2s !${Cursor.ID}
		/delay 2s ${Window[TradeWnd].Open}
	/next i
	/declare tradetries int local 0
	:hitTrade
	/notify TradeWnd TRDW_Trade_Button leftmouseup
	/varcalc tradetries ${tradetries}+1
	/delay 2s ${Window[TradeWnd].MyTradeReady}
	/if (!${Window[TradeWnd].MyTradeReady} && ${tradetries} < 2) /goto :hitTrade
	/delay 5s ${Window[TradeWnd].HisTradeReady}||!${Window[TradeWnd].Open}
	/if (${Window[TradeWnd].Open}) {
		/if (!${Window[TradeWnd].HisTradeReady} && ${Window[TradeWnd].MyTradeReady}) {
			/echo \arThey Aren't Accepting my Trade. Going to hold on to it and try to give it to the next BagMan in line.
			/varset ItemGiven FALSE
		}
	} else /if (!${FindItemCount[${itemToGive}]} && !${Window[TradeWnd].Open}) {
		/varset ItemGiven TRUE
	} else /if (${FindItemCount[${itemToGive}]} && !${Window[TradeWnd].Open}) {
		/echo \awIt Appears they already have that item.
		/varset HasItem TRUE
		/varset ItemGiven FALSE
	} else {
		/echo \arHEY! What are you doing on this line! Something's gone wrong on checking if they've been given the item. \awLine: \at${Macro.CurLine}
	}
	/if (${Debugging}) /echo \awItem: \ap${itemToGive}, \awHasItem: ${If[${HasItem},Yes,No]}, ItemGiven: ${If[${ItemGiven},Yes,No]}, \atLine: ${Macro.CurLine}
/return

Sub CheckThings
	/call CheckPlugin MQ2Nav
	/call CheckMesh
	/call CheckPlugin MQ2EQBC
	/call WhereAmI
	/call CheckSubscription Gold
	/if (${Endmac}) /end
/return

Sub WhereAmI
	/if (${Zone.ID} != 151) {
		/echo "\arYou must be in the Bazaar to use this macro. Ending."
		/varset Endmac TRUE
	}
/return

Sub CheckSubscription(RequiredSub)
	/if (!${Me.Subscription.Equal[${RequiredSub}]}) {
		/echo "\arYou don't not have a ${RequiredSub} Subscription. Ending Macro."
		/varset Endmac TRUE
	}
/return

Sub CheckPlugin(PluginName)
	/if (!${Plugin[${PluginName}].Name.Equal[${PluginName}]}) {
		/plugin ${PluginName}
		/delay 3s ${Plugin[${PluginName}].Name.Equal[${PluginName}]}
		/if (!${Plugin[${PluginName}].Name.Equal[${PluginName}]}) {
			/echo "The Plugin --> ${PluginName} didn't load for some reason."
			/varset Endmac TRUE
		}
		/if (${PluginName.Equal[MQ2Nav]}) {
			/delay 2s
		}
	}
	/if (${PluginName.Equal[MQ2EQBC]}) {
		/if (!${EQBC.Connected}) {
			/bccmd connect
			/delay 3s ${EQBC.Connected}
			/if (!${EQBC.Connected}) {
				/echo "\arCould not connect to the EQBC Server. Are you sure it's running?"
				/varset Endmac TRUE
			}
		}
	}
/return

Sub CheckMesh
	/if (!${Navigation.MeshLoaded}) {
		/nav reload
		/delay 3s ${Navigation.MeshLoaded}
		/if (!${Navigation.MeshLoaded}) {
			/echo "\arNo navigational mesh could be found for this zone. Make one and try again"
			/varset Endmac TRUE
		}
	}
/return

Sub CheckMyBuyLines
	/declare i int local 0
	/declare j int local 0
	/declare bFound bool local FALSE
	/for i 2 to ${ItemArray.Size}
		/if (${Debugging}) /echo \ayItem${i}: \ap${ItemArray[${i}]}
		/for j 1 to 300
			/if (${Window[BarterWnd].Child[BTR_BuyLineList].List[${j},3].Equal[NULL]}) /break
			/if (${Window[BarterWnd].Child[BTR_BuyLineList].List[${j},3].Equal[${ItemArray[${i}]}]}) {
				/if (${Debugging}) /echo \ayThere is already a buy line for \ap${ItemArray[${i}]}.
				/varset bFound TRUE
				/break
			}
		/next j
		|** If I didn't find a buyline for it I need to create one. **|
		/if (!${bFound} && ${IHaveArray[${i}]} != -1) {
			/call CreateBuyLine ${i}
		} else /if (${IHaveArray[${i}]} == -1) {
			/echo \awNot going to make a buyline for: \ap${ItemArray[${i}]} \awbecause all bagmen have it.
		}
		/varset bFound FALSE
	/next i
/return

Sub CreateBuyLine(string itemNum)
	/echo \ayCreating a buy line for \ap${ItemArray[${itemNum}]}
	/if (!${Window[BarterWnd].Child[BTR_ItemSearchButton].Enabled}) {
		/if (${Debugging}) /echo \ayWaiting on the Search button to be ready!
		/delay 10s ${Window[BarterWnd].Child[BTR_ItemSearchButton].Enabled}
	}
	/notify BarterWnd BTR_ItemSearchEdit leftmouseup
	/if (${Window[BarterWnd].Child[BTR_ItemSearchEdit].Text.Length}) /call ClearChat "BTR_ItemSearchEdit"
	/call TypeIn "${ItemArray[${itemNum}]}"
	/notify BarterWnd BtR_ItemSearchButton leftmouseup
	/delay 2s ${Window[BarterWnd].Child[BTR_ItemSearchList].List[1,2].Length}
	/if (${Window[BarterWnd].Child[BTR_ItemSearchList].List[1,2].Length}) {
		/declare i int local 0
		/for i 1 to 201
			/if (${Window[BarterWnd].Child[BTR_ItemSearchList].List[${i},2].Equal[${ItemArray[${itemNum}]}]}) {
				/notify BarterWnd BtR_ItemSearchList listselect ${i}
				/delay 1s ${Window[BarterWnd].Child[BTR_BuyLineAddButton].Enabled}
				/notify BarterWnd BTR_CompensationCopper leftmouseup
				/delay 1s ${Window[QuantityWnd].Open}
				/notify QuantityWnd QTYW_Slider newvalue 1
				/delay 5
				/notify QuantityWnd QTYW_Accept_Button leftmouseup
				/delay 5
				/notify BarterWnd BTR_CountEdit leftmouseup
				/call TypeIn "1"
				/notify BarterWnd BTR_BuyLineAddButton leftmouseup
				/break
			} else {
				/if (!${Window[BarterWnd].Child[BTR_ItemSearchList].List[${i},2].Length}) {
					/echo \arSomething was wrong with the item listed at Item${itemNum} \aw~> \ap${ItemArray[${itemNum}]}
					/echo \arIt was not found when we searched we searched for it to create a listing. Going to next item.
					/break
				}
			}
		/next i
	} else {
		/echo \arError: Item\am${itemNum} \aw~> \ap${ItemArray[${itemNum}]}
		/if (${Debugging}) /echo \arIt was not found when we searched we searched for it to create a listing. Going to next item.
	}
	/if (${Debugging}) /echo \agDone trying to create a buyline for ${ItemArray[${itemNum}]}
/return

Sub OpenBarter
	/if (!${Window[BarterWnd].Open}) {
		/declare tries int local 0
		:open
		/buyer
		/varcalc tries ${tries}+1
		/delay 1s ${Window[BarterWnd].Open}
		/if (!${Window[BarterWnd].Open} && ${tries} == 2) {
			/echo \arSeems to have been a problem opening your buyer window. Ending macro. 
			/endm
		} else /if (!${Window[BarterWnd].Open}) {
			/goto :open
		}
	}
/return

Sub ClearChat(string child)
	:clear
	/if (${Window[BarterWnd].Child[${child}].Text.Length}) {
		/ctrlkey /shiftkey /keypress home chat
		/delay 5
		/ctrlkey /shiftkey /keypress delete chat
		/delay 5
	}
	/if (${Window[BarterWnd].Child[${child}].Text.Length}) /goto :clear
/return

Sub TypeIn(InStr)
	/declare char string local
	/declare i int local
	/for i 1 to ${InStr.Length}
		/varset char ${InStr.Mid[${i},1]}
		/if (!${char.Length}) {
			/nomodkey /keypress Space chat
		} else {
			/if (${char.Left[1].Equal[(]}) /return
			/if (${char.Left[1].Equal[)]}) /return
			/nomodkey /keypress ${char} chat
		}
	/next i
/return

Sub CloseBarter
	/if (${Window[BarterWnd].Open}) {
		/declare tries int local 0
		:close
		/windowstate BarterWnd Close
		/varcalc tries ${tries}+1
		/delay 1s !${Window[BarterWnd].Open}
		/if (${Window[BarterWnd].Open} && ${tries} == 2) {
			/echo \arI tried to close your buyer window ${tries} times, seems to be a problem. Issuing cleanup command.
			/cleanup
		} else /if (${Window[BarterWnd].Open}) /goto :close
	}
/return

Sub CheckINI(string IniName,string Section,string Key,string TypeVar,Default)
	/if (!${Ini[${IniName},${Section},${Key}].Length}) {
		/ini ${IniName} ${Section} ${Key} ${Default}
	}
	/declare ${Key} ${TypeVar} outer ${Ini[${IniName},${Section},${Key}]}
	/echo \atLoading INI ${IniName} ~ Key: ${Key} Type: ${TypeVar} INI Value: ${Ini[${IniName},${Section},${Key}]}
/return

Sub GetCount
	/declare i int local 0
	|** Checking the INI to see how many items you want to setup barter prices for **|
	/for i 1 to 1000
		/if (${Ini[BarterLoreSettings.ini,ItemsToBuy,Item${i}].Length} && ${Ini[BarterLoreSettings.ini,ItemsToBuy,Item${i}].NotEqual[NULL]}) {
			/varcalc ItemCount ${ItemCount}+1
		} else {
			/if (${Debugging}) /echo \ayYou should be trying to setup buy orders for \aw(\ag${ItemCount}\aw) \ayitems.
			/break
		}
	/next i
	
	|** Check the INI to see how many people you want to pass off items to. **|
	/for i 1 to 100
		/if (${Ini[BarterLoreSettings.ini,PeopleToGive,ToonName${i}].Length} && ${Ini[BarterLoreSettings.ini,PeopleToGive,ToonName${i}].NotEqual[NULL]}) {
			/varcalc BagMen ${BagMen}+1
		} else {
			/if (${Debugging}) /echo \ayYou should be trying to pass off items to \aw(\ag${BagMen}\aw) \aytoons
			/break
		}
	/next i
/return

Sub GenerateINIStub
	/declare i int local 0
	|** Generate Stubs for items to buy **|
	/for i 1 to 10
		/ini BarterLoreSettings.ini ItemsToBuy Item${i} ""
	/next i
	
	|** Generate stub for people to pass off to **|
	/for i 1 to 10
		/ini BarterLoreSettings.ini PeopleToGive ToonName${i} ""
	/next i
/return

Sub PopulateBuyList
	/if (${ItemCount}) {
		/declare ItemArray[${Math.Calc[${ItemCount}+1].Int}] string outer 0
		/declare IHaveArray[${Math.Calc[${ItemCount}+1].Int}] int outer 0
		/varset IHaveArray[1] -1
		/varset ItemArray[1] -1
		/declare i int local 0
		/for i 1 to ${ItemCount}
			/varset ItemArray[${Math.Calc[${i}+1]}] ${Ini[BarterLoreSettings.ini,ItemsToBuy,Item${i}]}
		/next i
	} else {
		/echo \arI couldn't find anything in your INI. Lemme generate you a stub.
		/call GenerateINIStub
		/echo \ayStuff Generated, ending macro, go edit it.
		/end
	}
/return

Sub PopulateBagMen
	/if (${BagMen}) {
		/declare i int local 0
		/for i 1 to ${BagMen}
			/if (!${Spawn[${Ini[BarterLoreSettings.ini,PeopleToGive,ToonName${i}]}].ID}) /varcalc BagMen ${BagMen}-1
		/next i
		/if (${BagMen}) {
			/bccmd names
			/delay 2s ${Bool[${EQBC.Names}]}
			|** 2 Dimensional Array, where ${i},1 is PlayerName and ${i},2+ is if they are known to have the item yet. **|
			/declare BagMenArray[${BagMen},${Math.Calc[${ItemCount}+1].Int}] string outer 0
			/declare extraToons int local 0
			
			/declare j int local 1
			/for i 1 to ${BagMen}
				|** If they are in the zone I'll add them to the array, otherwise I don't **|
				/if (${Spawn[${Ini[BarterLoreSettings.ini,PeopleToGive,ToonName${i}]}].ID}) {
					/varset BagMenArray[${i},1] ${Ini[BarterLoreSettings.ini,PeopleToGive,ToonName${i}]}
					/echo \ao${BagMenArray[${i},1]} \awwill receive items from me.
					|** Make sure they are setup to automatically receive items from me. **|
					/if (${Debugging}) /echo \at${BagMenArray[${i},1]} is connected? ${Bool[${EQBC.Names.Find[${BagMenArray[${i},1]}]}]}. Line: ${Macro.CurLine}
					/if (${EQBC.Names.Find[${BagMenArray[${i},1]}]}) {
						/bct ${BagMenArray[${j},1]} //plugin MQ2AutoAccept
						/delay 1s
						/bct ${BagMenArray[${j},1]} //autoaccept trade on
						/bct ${BagMenArray[${j},1]} //autoaccept add ${Me.CleanName}
						/bct ${BagMenArray[${j},1]} //autoaccept on
						/bct ${BagMenArray[${j},1]} //autoaccept save
					}
					/varcalc j ${j}+1
				}
			/next i
		} else {
			/echo \arThere were no BagMen, or they weren't in the zone with you!!!
			/end
		}
	}
	/varcalc BagMen ${BagMen}-${extraToons}
/return

Sub Declares
	/declare Debugging bool outer FALSE
	/declare Endmac bool outer FALSE
	/declare ItemCount int outer 0
	/declare BagMen int outer 0
	/declare HadToGive bool outer FALSE
	/declare ItemGiven bool outer FALSE
	/declare HasItem bool outer FALSE
	/declare startLoc string outer "${Me.Y} ${Me.X} ${Me.Z}"
	/if (${Debugging}) /echo \agI will return to ${Me.MQLoc} if I pass items off.
	/call GetCount
	/call PopulateBuyList
	/call PopulateBagMen
/return
